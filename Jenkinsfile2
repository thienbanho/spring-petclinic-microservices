pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_CUSTOMERS', defaultValue: 'main', description: 'Branch for customers-service')
        string(name: 'BRANCH_VISITS', defaultValue: 'main', description: 'Branch for visits-service')
        string(name: 'BRANCH_VETS', defaultValue: 'main', description: 'Branch for vets-service')
        string(name: 'BRANCH_GENAI', defaultValue: 'main', description: 'Branch for genai-service')
        string(name: 'BRANCH_ADMIN', defaultValue: 'main', description: 'Branch for admin-server')
        string(name: 'BRANCH_CONFIG', defaultValue: 'main', description: 'Branch for config-server')
        string(name: 'BRANCH_GATEWAY', defaultValue: 'main', description: 'Branch for api-gateway')
        string(name: 'BRANCH_DISCOVERY', defaultValue: 'main', description: 'Branch for discovery-server')
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Environment to deploy to (dev or staging)')
    }

    environment {
        DOCKERHUB_USERNAME = "thienbanho"
        GITOPS_REPO = "https://github.com/thienbanho/spring-petclinic-microservices.git"
        GITOPS_BRANCH = "main"
        GIT_CREDENTIALS_ID = "git-credentials"
    }

    stages {
        stage('Generate Image Tags') {
            steps {
                script {
                    def services = [
                        'customers-service': params.BRANCH_CUSTOMERS,
                        'visits-service': params.BRANCH_VISITS,
                        'vets-service': params.BRANCH_VETS,
                        'genai-service': params.BRANCH_GENAI,
                        'admin-server': params.BRANCH_ADMIN,
                        'config-server': params.BRANCH_CONFIG,
                        'api-gateway': params.BRANCH_GATEWAY,
                        'discovery-server': params.BRANCH_DISCOVERY
                    ]

                    IMAGE_TAGS = [:]

                    services.each { service, branch ->
                        def commit = sh(
                            script: "git ls-remote ${GITOPS_REPO} refs/heads/${branch} | cut -c1-7",
                            returnStdout: true
                        ).trim()

                        if (!commit) {
                            error "‚ùå Cannot find branch '${branch}' for service '${service}'"
                        }

                        IMAGE_TAGS[service] = commit
                    }

                    echo "üì¶ Image tags to be used:"
                    IMAGE_TAGS.each { k, v -> echo " - ${k}: ${v}" }
                }
            }
        }

        stage('Update GitOps Repository') {
            steps {
                script {
                    // Clone the GitOps repo
                    sh "rm -rf gitops"
                    sh "git clone ${GITOPS_REPO} gitops"

                    // Construct values.yaml path
                    def valuesPath = "overlays/${params.ENVIRONMENT}/values-${params.ENVIRONMENT}.yaml"
                    def fullValuesPath = "gitops/${valuesPath}"

                    // Verify the overlays directory exists, create if missing
                    def overlaysDir = "gitops/overlays/${params.ENVIRONMENT}"
                    sh "mkdir -p ${overlaysDir}"

                    // Debug: Check existing file content if it exists
                    if (fileExists(fullValuesPath)) {
                        def existingContent = readFile(fullValuesPath)
                        echo "üìÑ Existing values.yaml content:\n${existingContent}"
                    } else {
                        echo "‚ö†Ô∏è No existing values.yaml found at ${fullValuesPath}. Creating new file."
                    }

                    // Start building YAML content with all fields
                    def valuesContent = """# PetClinic values for ${params.ENVIRONMENT} environment
services:
"""

                    // Hard-code each service with its port and updated image tag
                    IMAGE_TAGS.each { service, tag ->
                        def port = service == 'customers-service' ? 8081 :
                                  service == 'visits-service' ? 8084 :
                                  service == 'vets-service' ? 8083 :
                                  service == 'genai-service' ? 8082 :
                                  service == 'admin-server' ? 9100 :
                                  service == 'config-server' ? 8888 :
                                  service == 'api-gateway' ? 8080 :
                                  service == 'discovery-server' ? 8761 : 8080
                        valuesContent += """  - name: ${service}
    image: ${DOCKERHUB_USERNAME}/spring-petclinic-${service}:${tag}
    port: ${port}
"""
                    }

                    // Add the remaining fields from the original values.yaml
                    valuesContent += """
service:
  type: NodePort
  nodePort: 30080

serviceAccount:
  create: true
  name: ""

ingress:
  enabled: false

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
"""

                    echo "üìÑ Generated YAML for ${params.ENVIRONMENT}:\n${valuesContent}"

                    // Write the new values file
                    writeFile file: fullValuesPath, text: valuesContent

                    // Debug: Verify written file content
                    def writtenContent = readFile(fullValuesPath)
                    echo "üìù Written values.yaml content:\n${writtenContent}"

                    // Commit and push changes if needed
                    dir('gitops') {
                        withCredentials([usernamePassword(credentialsId: GIT_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                            def safeRepo = GITOPS_REPO.replace("https://", "https://${GIT_USERNAME}:${GIT_PASSWORD}@")

                            sh """
                                git config user.email "thienbanho@gmail.com"
                                git config user.name "thienbanho"
                                git status
                                git add ${valuesPath}
                                git diff --cached
                                git diff --cached --quiet || git commit -m "Update ${params.ENVIRONMENT} environment with new image tags"
                                git push ${safeRepo} ${GITOPS_BRANCH}
                            """
                        }
                    }
                }
            }
        }

        stage('Show Access Info') {
            steps {
                script {
                    echo "üîó Access app at: http://<WORKER_NODE_IP>:30080"
                    echo "‚ö†Ô∏è Add domain to /etc/hosts manually if needed."
                    echo "üîÑ ArgoCD will automatically detect and apply changes."
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ CD Pipeline completed. ArgoCD is synced."
        }
        failure {
            echo "‚ùå CD process failed."
        }
    }
}
