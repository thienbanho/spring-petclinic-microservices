pipeline {
  agent any

  parameters {
    string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for config-server service')
    string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for discovery-server service')
    string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch for api-gateway service')
    string(name: 'ADMIN_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for admin-server service')
    string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for customers-service')
    string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for visits-service')
    string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for vets-service')
    string(name: 'GENAI_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for genai-service')
  }

  environment {
    DOCKER_HUB_CREDS = credentials('dockerhub-credentials')
    NAMESPACE = 'petclinic'
    CHART_NAME = 'petclinic'
    DOCKER_HUB_USERNAME = 'thienbanho'
    DOMAIN_NAME = 'petclinic.local'
    NODE_PORT = '30080'  // NodePort của api-gateway
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Determine Image Tags') {
      steps {
        script {
          def serviceImageTags = [
            'config-server': determineImageTag('CONFIG_SERVER_BRANCH'),
            'discovery-server': determineImageTag('DISCOVERY_SERVER_BRANCH'),
            'api-gateway': determineImageTag('API_GATEWAY_BRANCH'),
            'admin-server': determineImageTag('ADMIN_SERVER_BRANCH'),
            'customers-service': determineImageTag('CUSTOMERS_SERVICE_BRANCH'), 
            'visits-service': determineImageTag('VISITS_SERVICE_BRANCH'),
            'vets-service': determineImageTag('VETS_SERVICE_BRANCH'),
            'genai-service': determineImageTag('GENAI_SERVICE_BRANCH')
          ]
          env.SERVICE_IMAGE_TAGS = groovy.json.JsonOutput.toJson(serviceImageTags)
          echo "Service image tags: ${env.SERVICE_IMAGE_TAGS}"
        }
      }
    }

    stage('Login to Docker Hub') {
      steps {
        sh """
          echo "\$DOCKER_HUB_CREDS_PSW" | docker login -u "\$DOCKER_HUB_CREDS_USR" --password-stdin
        """
      }
    }

    stage('Configure Minikube') {
      steps {
        sh 'eval $(minikube docker-env)'
      }
    }

    stage('Pull & Load Images') {
      steps {
        script {
          def serviceImageTags = new groovy.json.JsonSlurperClassic().parseText(env.SERVICE_IMAGE_TAGS)
          serviceImageTags.each { service, tag ->
            def fullImage = "${DOCKER_HUB_USERNAME}/spring-petclinic-${service}:${tag}"
            def localImage = "spring-petclinic-${service}:${tag}"

            sh """
              docker pull ${fullImage}
              docker tag ${fullImage} ${localImage}
              minikube image load ${localImage}
            """
          }
        }
      }
    }

    stage('Create Custom Values') {
      steps {
        script {
          def serviceImageTags = new groovy.json.JsonSlurperClassic().parseText(env.SERVICE_IMAGE_TAGS)
          def originalValues = readFile 'petclinic/values.yaml'

          def updatedValues = originalValues
          serviceImageTags.each { service, tag ->
            updatedValues = updatedValues.replaceAll(/(?m)^(\s*)${service}:\s*$\n\1  imageTag: .*/, "\$1${service}:\n\$1  imageTag: ${tag}")
          }

          // Đảm bảo api-gateway có NodePort
          updatedValues = updatedValues.replaceAll(/(?m)^(\s*)service:\s*$\n\1  type: .*/, "\$1service:\n\$1  type: NodePort\n\$1  nodePort: ${NODE_PORT}")

          writeFile file: 'custom-values.yaml', text: updatedValues
        }
      }
    }

    stage('Deploy with Helm') {
      steps {
        script {
          sh '''
            kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
            helm upgrade --install ${CHART_NAME} ./petclinic -f custom-values.yaml --namespace ${NAMESPACE}
          '''
        }
      }
    }

    stage('Verify Deployment') {
      steps {
        script {
          sh '''
            kubectl get pods -n ${NAMESPACE}
            kubectl get svc -n ${NAMESPACE}
          '''
        }
      }
    }

    stage('Provide Access Details') {
      steps {
        script {
          // Lấy Minikube IP
          def minikubeIp = sh(script: 'minikube ip', returnStdout: true).trim()
          
          // Xác nhận NodePort của api-gateway
          def nodePort = sh(script: "kubectl get svc api-gateway -n ${NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
          
          echo "✅ Deployment successful!"
          echo "Access your application at: http://${DOMAIN_NAME}:${nodePort}"
          echo "Please add the following entry to your /etc/hosts file:"
          echo "${minikubeIp} ${DOMAIN_NAME}"
        }
      }
    }
  }

  post {
    success {
      echo "✅ Deployment completed successfully."
    }
    failure {
      echo "❌ Deployment failed. Check logs above."
    }
    always {
      sh "docker logout"
    }
  }
}

// Helper function
def determineImageTag(String branchParamName) {
  def branchName = params[branchParamName]
  return (branchName == 'main' || branchName == 'master') ? 'latest' : branchName
}